{"ast":null,"code":"import { throwServerError } from \"../utils/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function parseAndCheckHttpResponse(operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      if (response.status >= 300) {\n        var getResult = function () {\n          try {\n            return JSON.parse(bodyText);\n          } catch (err) {\n            return bodyText;\n          }\n        };\n\n        throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n      }\n\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n      }\n    }).then(function (result) {\n      if (!Array.isArray(result) && !hasOwnProperty.call(result, 'data') && !hasOwnProperty.call(result, 'errors')) {\n        throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName, \"'.\"));\n      }\n\n      return result;\n    });\n  };\n}","map":{"version":3,"mappings":"AACA,SAASA,gBAAT,QAAiC,mBAAjC;AAEQ,kBAAc,GAAKC,MAAM,CAACC,SAAP,CAAgBC,cAAnC;AAQR,OAAM,SAAUC,yBAAV,CACJC,UADI,EAC+B;EAEnC,OAAO,UAACC,QAAD,EAAmB;IAAK,eAAQ,CACpCC,IAD4B,GAE5BC,IAF4B,CAEvB,oBAAQ;MACZ,IAAIF,QAAQ,CAACG,MAAT,IAAmB,GAAvB,EAA4B;QAE1B,IAAMC,SAAS,GAAG;UAChB,IAAI;YACF,OAAOC,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAP;UACD,CAFD,CAEE,OAAOC,GAAP,EAAY;YACZ,OAAOD,QAAP;UACD;QACF,CAND;;QAOAb,gBAAgB,CACdM,QADc,EAEdI,SAAS,EAFK,EAGd,wDAAiDJ,QAAQ,CAACG,MAA1D,CAHc,CAAhB;MAKD;;MAED,IAAI;QACF,OAAOE,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAP;MACD,CAFD,CAEE,OAAOC,GAAP,EAAY;QACZ,IAAMC,UAAU,GAAGD,GAAnB;QACAC,UAAU,CAACC,IAAX,GAAkB,kBAAlB;QACAD,UAAU,CAACT,QAAX,GAAsBA,QAAtB;QACAS,UAAU,CAACE,UAAX,GAAwBX,QAAQ,CAACG,MAAjC;QACAM,UAAU,CAACF,QAAX,GAAsBA,QAAtB;QACA,MAAME,UAAN;MACD;IACF,CA7B4B,EA8B5BP,IA9B4B,CA8BvB,UAACU,MAAD,EAAY;MAChB,IACE,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAD,IACA,CAACf,cAAc,CAACkB,IAAf,CAAoBH,MAApB,EAA4B,MAA5B,CADD,IAEA,CAACf,cAAc,CAACkB,IAAf,CAAoBH,MAApB,EAA4B,QAA5B,CAHH,EAIE;QAEAlB,gBAAgB,CACdM,QADc,EAEdY,MAFc,EAGd,iDACEC,KAAK,CAACC,OAAN,CAAcf,UAAd,IACIA,UAAU,CAACiB,GAAX,CAAe,cAAE;UAAI,SAAE,CAACC,aAAH;QAAgB,CAArC,CADJ,GAEIlB,UAAU,CAACkB,aAHjB,EAG8B,IAH9B,CAHc,CAAhB;MASD;;MACD,OAAOL,MAAP;IACD,CAhD4B;EAgD3B,CAhDJ;AAiDD","names":["throwServerError","Object","prototype","hasOwnProperty","parseAndCheckHttpResponse","operations","response","text","then","status","getResult","JSON","parse","bodyText","err","parseError","name","statusCode","result","Array","isArray","call","map","operationName"],"sourceRoot":"","sources":["../../../src/link/http/parseAndCheckHttpResponse.ts"],"sourcesContent":["import { Operation } from '../core';\nimport { throwServerError } from '../utils';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport function parseAndCheckHttpResponse(\n  operations: Operation | Operation[],\n) {\n  return (response: Response) => response\n    .text()\n    .then(bodyText => {\n      if (response.status >= 300) {\n        // Network error\n        const getResult = () => {\n          try {\n            return JSON.parse(bodyText);\n          } catch (err) {\n            return bodyText\n          }\n        }\n        throwServerError(\n          response,\n          getResult(),\n          `Response not successful: Received status code ${response.status}`,\n        );\n      }\n\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        const parseError = err as ServerParseError;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n      }\n    })\n    .then((result: any) => {\n      if (\n        !Array.isArray(result) &&\n        !hasOwnProperty.call(result, 'data') &&\n        !hasOwnProperty.call(result, 'errors')\n      ) {\n        // Data error\n        throwServerError(\n          response,\n          result,\n          `Server response was missing for query '${\n            Array.isArray(operations)\n              ? operations.map(op => op.operationName)\n              : operations.operationName\n          }'.`,\n        );\n      }\n      return result;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}